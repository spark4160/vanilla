diff --git a/res/layout/medialibrary_preferences.xml b/res/layout/medialibrary_preferences.xml
index e622e6ad..1ba40d93 100644
--- a/res/layout/medialibrary_preferences.xml
+++ b/res/layout/medialibrary_preferences.xml
@@ -35,13 +35,6 @@ along with this program. If not, see <http://www.gnu.org/licenses/>.
 		android:layout_width="wrap_content"
 		android:layout_height="wrap_content"
 		android:text="@string/media_scan_force_bastp" />
-	<TextView
-		style="?android:attr/listSeparatorTextViewStyle"
-		android:textColor="?overlay_foreground_color"
-		android:text="@string/media_scan_whitelist" />
-	<EditText android:id="@+id/media_scan_whitelist"
-		android:layout_width="wrap_content"
-		android:layout_height="wrap_content" />
 
 	<TextView
 		style="?android:attr/listSeparatorTextViewStyle"
diff --git a/res/values/translatable.xml b/res/values/translatable.xml
index 7eaa434d..14f692d3 100644
--- a/res/values/translatable.xml
+++ b/res/values/translatable.xml
@@ -313,7 +313,6 @@ THE SOFTWARE.
 	<string name="media_scan_start">Start scan</string>
 	<string name="media_scan_force_bastp">Always use built-in tag reader</string>
 	<string name="media_scan_group_albums">Group albums by folder</string>
-	<string name="media_scan_whitelist">Scan all files in this directory</string>
 	<string name="media_statistics">Statistics</string>
 	<string name="media_stats_tracks">Number of tracks</string>
 	<string name="media_stats_playtime">Play time (Hours)</string>
diff --git a/src/ch/blinkenlights/android/medialibrary/MediaLibrary.java b/src/ch/blinkenlights/android/medialibrary/MediaLibrary.java
index 41cc5194..fc446a26 100644
--- a/src/ch/blinkenlights/android/medialibrary/MediaLibrary.java
+++ b/src/ch/blinkenlights/android/medialibrary/MediaLibrary.java
@@ -12,7 +12,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ * along with this program. If not, see <http://www.gnu.org/licenses/>. 
  */
 
 package ch.blinkenlights.android.medialibrary;
@@ -54,7 +54,6 @@ public class MediaLibrary  {
 	private static final String PREF_KEY_GROUP_ALBUMS         = "group_albums";
 	private static final String PREF_KEY_NATIVE_LIBRARY_COUNT = "native_audio_db_count";
 	private static final String PREF_KEY_NATIVE_LAST_MTIME    = "native_last_mtime";
-	private static final String PREF_KEY_WHITELIST            = "whitelist";
 
 	/**
 	 * Options used by the MediaScanner class
@@ -62,7 +61,6 @@ public class MediaLibrary  {
 	public static class Preferences {
 		public boolean forceBastp;
 		public boolean groupAlbumsByFolder;
-		public String whitelist;
 		int _nativeLibraryCount;
 		int _nativeLastMtime;
 	}
@@ -114,7 +112,6 @@ public class MediaLibrary  {
 			prefs = new MediaLibrary.Preferences();
 			prefs.forceBastp = backend.getSetPreference(PREF_KEY_FORCE_BASTP, -1) != 0;
 			prefs.groupAlbumsByFolder = backend.getSetPreference(PREF_KEY_GROUP_ALBUMS, -1) != 0;
-			prefs.whitelist = backend.getSetPreference(PREF_KEY_WHITELIST, null);
 			prefs._nativeLibraryCount = backend.getSetPreference(PREF_KEY_NATIVE_LIBRARY_COUNT, -1);
 			prefs._nativeLastMtime = backend.getSetPreference(PREF_KEY_NATIVE_LAST_MTIME, -1);
 			sPreferences = prefs; // cached for frequent access
@@ -133,7 +130,6 @@ public class MediaLibrary  {
 		MediaLibraryBackend backend = getBackend(context);
 		backend.getSetPreference(PREF_KEY_FORCE_BASTP, prefs.forceBastp ? 1 : 0);
 		backend.getSetPreference(PREF_KEY_GROUP_ALBUMS, prefs.groupAlbumsByFolder ? 1 : 0);
-		backend.getSetPreference(PREF_KEY_WHITELIST, prefs.whitelist);
 		backend.getSetPreference(PREF_KEY_NATIVE_LIBRARY_COUNT, prefs._nativeLibraryCount);
 		backend.getSetPreference(PREF_KEY_NATIVE_LAST_MTIME, prefs._nativeLastMtime);
 		sPreferences = null;
@@ -463,9 +459,9 @@ public class MediaLibrary  {
 		scanTargets.add(Environment.getExternalStorageDirectory());
 
 		// this *may* exist
-		File storage = new File("/storage");
-		if (storage.isDirectory())
-			scanTargets.add(storage);
+		File sdCard = new File("/storage/sdcard1");
+		if (sdCard.isDirectory())
+			scanTargets.add(sdCard);
 
 		return scanTargets.toArray(new File[scanTargets.size()]);
 	}
@@ -696,9 +692,5 @@ public class MediaLibrary  {
 		 * The value of this preference
 		 */
 		String VALUE = "value";
-		/**
-		 * The string value of this preference
-		 */
-		String STRING = "string";
 	}
 }
diff --git a/src/ch/blinkenlights/android/medialibrary/MediaLibraryBackend.java b/src/ch/blinkenlights/android/medialibrary/MediaLibraryBackend.java
index 4d6a91f7..a6998d02 100644
--- a/src/ch/blinkenlights/android/medialibrary/MediaLibraryBackend.java
+++ b/src/ch/blinkenlights/android/medialibrary/MediaLibraryBackend.java
@@ -12,7 +12,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ * along with this program. If not, see <http://www.gnu.org/licenses/>. 
  */
 
 package ch.blinkenlights.android.medialibrary;
@@ -35,7 +35,7 @@ public class MediaLibraryBackend extends SQLiteOpenHelper {
 	/**
 	 * The database version we are using
 	 */
-	private static final int DATABASE_VERSION = 20170324;
+	private static final int DATABASE_VERSION = 20170217;
 	/**
 	 * on-disk file to store the database
 	 */
@@ -132,33 +132,6 @@ public class MediaLibraryBackend extends SQLiteOpenHelper {
 	}
 
 	/**
-	 * Simple interface to set and get preference values as strings
-	 *
-	 * @param stringKey the key to use
-	 * @param newVal the string value to set
-	 *
-	 * Note: The new value will only be set if it is not null
-	 *       Lookup failures will return null
-	 */
-	String getSetPreference(String stringKey, String newVal) {
-		String oldVal = null; // this is returned if we found nothing
-		int key = Math.abs(stringKey.hashCode());
-		SQLiteDatabase dbh = getWritableDatabase();
-
-		Cursor cursor = dbh.query(MediaLibrary.TABLE_PREFERENCES, new String[] { MediaLibrary.PreferenceColumns.STRING }, MediaLibrary.PreferenceColumns.KEY+"="+key, null, null, null, null, null);
-		if (cursor.moveToFirst()) {
-			oldVal = cursor.getString(0);
-		}
-		cursor.close();
-
-		if (newVal != null && !newVal.equals(oldVal)) {
-			dbh.execSQL("INSERT OR REPLACE INTO "+MediaLibrary.TABLE_PREFERENCES+" ("+MediaLibrary.PreferenceColumns.KEY+", "+MediaLibrary.PreferenceColumns.VALUE+", "+MediaLibrary.PreferenceColumns.STRING+") "
-			            +" VALUES("+key+", -1, \'"+newVal+"\')");
-		}
-		return oldVal;
-	}
-
-	/**
 	 * Wrapper for SQLiteDatabse.delete() function
 	 *
 	 * @param table the table to delete data from
diff --git a/src/ch/blinkenlights/android/medialibrary/MediaScanner.java b/src/ch/blinkenlights/android/medialibrary/MediaScanner.java
index 99deb34a..ca574f05 100644
--- a/src/ch/blinkenlights/android/medialibrary/MediaScanner.java
+++ b/src/ch/blinkenlights/android/medialibrary/MediaScanner.java
@@ -12,7 +12,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ * along with this program. If not, see <http://www.gnu.org/licenses/>. 
  */
 
 package ch.blinkenlights.android.medialibrary;
@@ -93,9 +93,6 @@ public class MediaScanner implements Handler.Callback {
 	 * library for new and changed files
 	 */
 	public void startNormalScan() {
-		// Update whitelist
-		whitelist = MediaLibrary.getPreferences(mContext).whitelist;
-
 		mScanPlan.addNextStep(RPC_NATIVE_VRFY, null)
 			.addNextStep(RPC_LIBRARY_VRFY, null);
 		mHandler.sendMessage(mHandler.obtainMessage(MSG_SCAN_RPC, RPC_KICKSTART, 0));
@@ -105,11 +102,7 @@ public class MediaScanner implements Handler.Callback {
 	 * Performs a 'slow' scan by inspecting all files on the device
 	 */
 	public void startFullScan() {
-		// Update whitelist
-		whitelist = MediaLibrary.getPreferences(mContext).whitelist;
-
 		for (File dir : MediaLibrary.discoverMediaPaths()) {
-			Log.d("vanilla", "scanning " + dir);
 			mScanPlan.addNextStep(RPC_READ_DIR, dir);
 		}
 		mScanPlan.addNextStep(RPC_LIBRARY_VRFY, null);
@@ -382,7 +375,6 @@ public class MediaScanner implements Handler.Callback {
 			return;
 
 		for (File file : dirents) {
-			// Log.d("vanilla", "inspect " + file);
 			int rpc = (file.isFile() ? RPC_INSPECT_FILE : RPC_READ_DIR);
 			mHandler.sendMessage(mHandler.obtainMessage(MSG_SCAN_RPC, rpc, 0, file));
 		}
@@ -399,11 +391,7 @@ public class MediaScanner implements Handler.Callback {
 		String path  = file.getAbsolutePath();
 		long songId  = MediaLibrary.hash63(path);
 
-		// Log.d("vanilla", "path " + path);
-		// Log.d("vanilla", "songId " + songId);
-		// Log.d("vanilla", "isBlacklisted(file) " + isBlacklisted(file));
-
-		if (!isWhitelisted(file) && isBlacklisted(file))
+		if (isBlacklisted(file))
 			return false;
 
 		long dbEntryMtime = mBackend.getSongMtime(songId) * 1000; // this is in unixtime -> convert to 'ms'
@@ -549,17 +537,6 @@ public class MediaScanner implements Handler.Callback {
 		return hasChanged;
 	}
 
-	/**
-	 * Returns true if the file should be scanned
-	 *
-	 * @param file the file to inspect
-	 * @return boolean
-	 */
-	private static String whitelist = "";
-	private boolean isWhitelisted(File file) {
-		return whitelist != null && whitelist.length() > 0 && file.getPath().startsWith(whitelist);
-	}
-
 	private static final Pattern sIgnoredFilenames = Pattern.compile("^([^\\.]+|.+\\.(jpe?g|gif|png|bmp|webm|txt|pdf|avi|mp4|mkv|zip|tgz|xml))$", Pattern.CASE_INSENSITIVE);
 	private static final Pattern sIgnoredDirectories = Pattern.compile("^.+/(Android/data|Alarms|Notifications|Ringtones)/.+$", Pattern.CASE_INSENSITIVE);
 	/**
@@ -698,3 +675,4 @@ public class MediaScanner implements Handler.Callback {
 		}
 	}
 }
+
diff --git a/src/ch/blinkenlights/android/medialibrary/MediaSchema.java b/src/ch/blinkenlights/android/medialibrary/MediaSchema.java
index 826ba808..91d6ed8f 100644
--- a/src/ch/blinkenlights/android/medialibrary/MediaSchema.java
+++ b/src/ch/blinkenlights/android/medialibrary/MediaSchema.java
@@ -12,7 +12,7 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ * along with this program. If not, see <http://www.gnu.org/licenses/>. 
  */
 
 package ch.blinkenlights.android.medialibrary;
@@ -121,8 +121,7 @@ public class MediaSchema {
 	 */
 	private static final String DATABASE_CREATE_PREFERENCES = "CREATE TABLE "+ MediaLibrary.TABLE_PREFERENCES + " ("
 	  + MediaLibrary.PreferenceColumns.KEY   +" INTEGER PRIMARY KEY, "
-	  + MediaLibrary.PreferenceColumns.VALUE +" INTEGER NOT NULL, "
-	  + MediaLibrary.PreferenceColumns.STRING +" TEXT "
+	  + MediaLibrary.PreferenceColumns.VALUE +" INTEGER NOT NULL "
 	  + ");";
 	/**
 	 * Index to select a playlist quickly
@@ -303,11 +302,6 @@ public class MediaSchema {
 			dbh.execSQL(VIEW_CREATE_SONGS_ALBUMS_ARTISTS_HUGE);
 		}
 
-		if (oldVersion < 20170324 && oldVersion >= 20170120) {
-			// Added a string field to allow for string based preferences
-			dbh.execSQL("DROP TABLE preferences");
-			dbh.execSQL(DATABASE_CREATE_PREFERENCES);
-		}
 	}
 
 	/**
diff --git a/src/ch/blinkenlights/android/vanilla/PreferencesMediaLibrary.java b/src/ch/blinkenlights/android/vanilla/PreferencesMediaLibrary.java
index 7bb71c51..1c28e04e 100644
--- a/src/ch/blinkenlights/android/vanilla/PreferencesMediaLibrary.java
+++ b/src/ch/blinkenlights/android/vanilla/PreferencesMediaLibrary.java
@@ -25,14 +25,10 @@ import android.content.Context;
 import android.content.DialogInterface;
 import android.database.Cursor;
 import android.os.Bundle;
-import android.text.Editable;
-import android.text.TextWatcher;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.CheckBox;
-import android.widget.EditText;
 import android.widget.TextView;
 
 import java.util.Timer;
@@ -81,10 +77,6 @@ public class PreferencesMediaLibrary extends Fragment implements View.OnClickLis
 	 */
 	private CheckBox mForceBastpCheck;
 	/**
-	 * EditText for a path that should be let through the blacklist
-	 */
-	private EditText mWhitelistText;
-	/**
 	 * Set if we should start a full scan due to option changes
 	 */
 	private boolean mFullScanPending;
@@ -107,16 +99,6 @@ public class PreferencesMediaLibrary extends Fragment implements View.OnClickLis
 		mDropDbCheck = (CheckBox)view.findViewById(R.id.media_scan_drop_db);
 		mGroupAlbumsCheck = (CheckBox)view.findViewById(R.id.media_scan_group_albums);
 		mForceBastpCheck = (CheckBox)view.findViewById(R.id.media_scan_force_bastp);
-		mWhitelistText = (EditText)view.findViewById(R.id.media_scan_whitelist);
-
-		// Set whitelist listener
-		mWhitelistText.addTextChangedListener(new TextWatcher() {
-			public void afterTextChanged(Editable s) {
-				updatePreferences(mWhitelistText);
-			}
-			public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
-			public void onTextChanged(CharSequence s, int start, int before, int count) {}
-		});
 
 		// Bind onClickListener to some elements
 		mStartButton.setOnClickListener(this);
@@ -209,29 +191,21 @@ public class PreferencesMediaLibrary extends Fragment implements View.OnClickLis
 	/**
 	 * Initializes and updates the scanner preferences
 	 *
-	 * @param control the input control to update, may be null
-	 * @return void but sets the input controls to their correct states
+	 * @param checkbox the item to update, may be null
+	 * @return void but sets the checkboxes to their correct state
 	 */
-	private void updatePreferences(TextView control) {
+	private void updatePreferences(CheckBox checkbox) {
 		MediaLibrary.Preferences prefs = MediaLibrary.getPreferences(getActivity());
 
-		if (control == mGroupAlbumsCheck)
+		if (checkbox == mGroupAlbumsCheck)
 			prefs.groupAlbumsByFolder = mGroupAlbumsCheck.isChecked();
-		if (control == mForceBastpCheck)
+		if (checkbox == mForceBastpCheck)
 			prefs.forceBastp = mForceBastpCheck.isChecked();
-		if (control == mWhitelistText)
-			prefs.whitelist = mWhitelistText.getText().toString();
 
 		MediaLibrary.setPreferences(getActivity(), prefs);
 
 		mGroupAlbumsCheck.setChecked(prefs.groupAlbumsByFolder);
 		mForceBastpCheck.setChecked(prefs.forceBastp);
-
-		// Only change mWhitelistText if its contents have changed
-		if (prefs.whitelist != null &&
-				!prefs.whitelist.contentEquals(mWhitelistText.getText())) {
-			mWhitelistText.setText(prefs.whitelist);
-		}
 	}
 
 	/**
diff --git a/src/ch/blinkenlights/android/vanilla/SlidingPlaybackActivity.java b/src/ch/blinkenlights/android/vanilla/SlidingPlaybackActivity.java
index 5666c853..6a8d1a5b 100644
--- a/src/ch/blinkenlights/android/vanilla/SlidingPlaybackActivity.java
+++ b/src/ch/blinkenlights/android/vanilla/SlidingPlaybackActivity.java
@@ -31,8 +31,6 @@ import android.widget.Toast;
 
 import java.net.InetAddress;
 
-import android.util.Log;
-
 public class SlidingPlaybackActivity extends PlaybackActivity
 	implements SlidingView.Callback,
 	           SeekBar.OnSeekBarChangeListener,
@@ -249,7 +247,6 @@ public class SlidingPlaybackActivity extends PlaybackActivity
 			query = allSource.buildSongQuery(projection);
 			query.data = id;
 		} else if (type == MediaUtils.TYPE_FILE) {
-			Log.d("vanilla", "file query");
 			query = MediaUtils.buildFileQuery(intent.getStringExtra("file"), projection);
 		} else {
 			query = MediaUtils.buildQuery(type, id, projection, null);
